/*
Stacks Blockchain API

Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

API version: v4.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ContractSearchResultResult This object carries the search result
type ContractSearchResultResult struct {
	// The id used to search this query.
	EntityId string `json:"entity_id"`
	EntityType string `json:"entity_type"`
	TxData *ContractSearchResultResultTxData `json:"tx_data,omitempty"`
	Metadata *AddressTransactionsListResponseResultsInner `json:"metadata,omitempty"`
}

// NewContractSearchResultResult instantiates a new ContractSearchResultResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractSearchResultResult(entityId string, entityType string) *ContractSearchResultResult {
	this := ContractSearchResultResult{}
	this.EntityId = entityId
	this.EntityType = entityType
	return &this
}

// NewContractSearchResultResultWithDefaults instantiates a new ContractSearchResultResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractSearchResultResultWithDefaults() *ContractSearchResultResult {
	this := ContractSearchResultResult{}
	return &this
}

// GetEntityId returns the EntityId field value
func (o *ContractSearchResultResult) GetEntityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value
// and a boolean to check if the value has been set.
func (o *ContractSearchResultResult) GetEntityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityId, true
}

// SetEntityId sets field value
func (o *ContractSearchResultResult) SetEntityId(v string) {
	o.EntityId = v
}

// GetEntityType returns the EntityType field value
func (o *ContractSearchResultResult) GetEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *ContractSearchResultResult) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *ContractSearchResultResult) SetEntityType(v string) {
	o.EntityType = v
}

// GetTxData returns the TxData field value if set, zero value otherwise.
func (o *ContractSearchResultResult) GetTxData() ContractSearchResultResultTxData {
	if o == nil || o.TxData == nil {
		var ret ContractSearchResultResultTxData
		return ret
	}
	return *o.TxData
}

// GetTxDataOk returns a tuple with the TxData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractSearchResultResult) GetTxDataOk() (*ContractSearchResultResultTxData, bool) {
	if o == nil || o.TxData == nil {
		return nil, false
	}
	return o.TxData, true
}

// HasTxData returns a boolean if a field has been set.
func (o *ContractSearchResultResult) HasTxData() bool {
	if o != nil && o.TxData != nil {
		return true
	}

	return false
}

// SetTxData gets a reference to the given ContractSearchResultResultTxData and assigns it to the TxData field.
func (o *ContractSearchResultResult) SetTxData(v ContractSearchResultResultTxData) {
	o.TxData = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ContractSearchResultResult) GetMetadata() AddressTransactionsListResponseResultsInner {
	if o == nil || o.Metadata == nil {
		var ret AddressTransactionsListResponseResultsInner
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractSearchResultResult) GetMetadataOk() (*AddressTransactionsListResponseResultsInner, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ContractSearchResultResult) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given AddressTransactionsListResponseResultsInner and assigns it to the Metadata field.
func (o *ContractSearchResultResult) SetMetadata(v AddressTransactionsListResponseResultsInner) {
	o.Metadata = &v
}

func (o ContractSearchResultResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["entity_id"] = o.EntityId
	}
	if true {
		toSerialize["entity_type"] = o.EntityType
	}
	if o.TxData != nil {
		toSerialize["tx_data"] = o.TxData
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return json.Marshal(toSerialize)
}

type NullableContractSearchResultResult struct {
	value *ContractSearchResultResult
	isSet bool
}

func (v NullableContractSearchResultResult) Get() *ContractSearchResultResult {
	return v.value
}

func (v *NullableContractSearchResultResult) Set(val *ContractSearchResultResult) {
	v.value = val
	v.isSet = true
}

func (v NullableContractSearchResultResult) IsSet() bool {
	return v.isSet
}

func (v *NullableContractSearchResultResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractSearchResultResult(val *ContractSearchResultResult) *NullableContractSearchResultResult {
	return &NullableContractSearchResultResult{value: val, isSet: true}
}

func (v NullableContractSearchResultResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractSearchResultResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


