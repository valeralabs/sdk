/*
Stacks Blockchain API

Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

API version: v4.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransactionEventStxLockAllOf struct for TransactionEventStxLockAllOf
type TransactionEventStxLockAllOf struct {
	EventType string `json:"event_type"`
	TxId string `json:"tx_id"`
	STXLockEvent TransactionEventStxLockAllOfSTXLockEvent `json:"STX_lock_event"`
}

// NewTransactionEventStxLockAllOf instantiates a new TransactionEventStxLockAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionEventStxLockAllOf(eventType string, txId string, sTXLockEvent TransactionEventStxLockAllOfSTXLockEvent) *TransactionEventStxLockAllOf {
	this := TransactionEventStxLockAllOf{}
	this.EventType = eventType
	this.TxId = txId
	this.STXLockEvent = sTXLockEvent
	return &this
}

// NewTransactionEventStxLockAllOfWithDefaults instantiates a new TransactionEventStxLockAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionEventStxLockAllOfWithDefaults() *TransactionEventStxLockAllOf {
	this := TransactionEventStxLockAllOf{}
	return &this
}

// GetEventType returns the EventType field value
func (o *TransactionEventStxLockAllOf) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *TransactionEventStxLockAllOf) GetEventTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *TransactionEventStxLockAllOf) SetEventType(v string) {
	o.EventType = v
}

// GetTxId returns the TxId field value
func (o *TransactionEventStxLockAllOf) GetTxId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TxId
}

// GetTxIdOk returns a tuple with the TxId field value
// and a boolean to check if the value has been set.
func (o *TransactionEventStxLockAllOf) GetTxIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxId, true
}

// SetTxId sets field value
func (o *TransactionEventStxLockAllOf) SetTxId(v string) {
	o.TxId = v
}

// GetSTXLockEvent returns the STXLockEvent field value
func (o *TransactionEventStxLockAllOf) GetSTXLockEvent() TransactionEventStxLockAllOfSTXLockEvent {
	if o == nil {
		var ret TransactionEventStxLockAllOfSTXLockEvent
		return ret
	}

	return o.STXLockEvent
}

// GetSTXLockEventOk returns a tuple with the STXLockEvent field value
// and a boolean to check if the value has been set.
func (o *TransactionEventStxLockAllOf) GetSTXLockEventOk() (*TransactionEventStxLockAllOfSTXLockEvent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.STXLockEvent, true
}

// SetSTXLockEvent sets field value
func (o *TransactionEventStxLockAllOf) SetSTXLockEvent(v TransactionEventStxLockAllOfSTXLockEvent) {
	o.STXLockEvent = v
}

func (o TransactionEventStxLockAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["event_type"] = o.EventType
	}
	if true {
		toSerialize["tx_id"] = o.TxId
	}
	if true {
		toSerialize["STX_lock_event"] = o.STXLockEvent
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionEventStxLockAllOf struct {
	value *TransactionEventStxLockAllOf
	isSet bool
}

func (v NullableTransactionEventStxLockAllOf) Get() *TransactionEventStxLockAllOf {
	return v.value
}

func (v *NullableTransactionEventStxLockAllOf) Set(val *TransactionEventStxLockAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionEventStxLockAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionEventStxLockAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionEventStxLockAllOf(val *TransactionEventStxLockAllOf) *NullableTransactionEventStxLockAllOf {
	return &NullableTransactionEventStxLockAllOf{value: val, isSet: true}
}

func (v NullableTransactionEventStxLockAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionEventStxLockAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


