/*
Stacks Blockchain API

Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

API version: v4.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RosettaBlockRequest A BlockRequest is utilized to make a block request on the /block endpoint.
type RosettaBlockRequest struct {
	NetworkIdentifier NetworkIdentifier `json:"network_identifier"`
	BlockIdentifier RosettaPartialBlockIdentifier `json:"block_identifier"`
}

// NewRosettaBlockRequest instantiates a new RosettaBlockRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRosettaBlockRequest(networkIdentifier NetworkIdentifier, blockIdentifier RosettaPartialBlockIdentifier) *RosettaBlockRequest {
	this := RosettaBlockRequest{}
	this.NetworkIdentifier = networkIdentifier
	this.BlockIdentifier = blockIdentifier
	return &this
}

// NewRosettaBlockRequestWithDefaults instantiates a new RosettaBlockRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRosettaBlockRequestWithDefaults() *RosettaBlockRequest {
	this := RosettaBlockRequest{}
	return &this
}

// GetNetworkIdentifier returns the NetworkIdentifier field value
func (o *RosettaBlockRequest) GetNetworkIdentifier() NetworkIdentifier {
	if o == nil {
		var ret NetworkIdentifier
		return ret
	}

	return o.NetworkIdentifier
}

// GetNetworkIdentifierOk returns a tuple with the NetworkIdentifier field value
// and a boolean to check if the value has been set.
func (o *RosettaBlockRequest) GetNetworkIdentifierOk() (*NetworkIdentifier, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkIdentifier, true
}

// SetNetworkIdentifier sets field value
func (o *RosettaBlockRequest) SetNetworkIdentifier(v NetworkIdentifier) {
	o.NetworkIdentifier = v
}

// GetBlockIdentifier returns the BlockIdentifier field value
func (o *RosettaBlockRequest) GetBlockIdentifier() RosettaPartialBlockIdentifier {
	if o == nil {
		var ret RosettaPartialBlockIdentifier
		return ret
	}

	return o.BlockIdentifier
}

// GetBlockIdentifierOk returns a tuple with the BlockIdentifier field value
// and a boolean to check if the value has been set.
func (o *RosettaBlockRequest) GetBlockIdentifierOk() (*RosettaPartialBlockIdentifier, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockIdentifier, true
}

// SetBlockIdentifier sets field value
func (o *RosettaBlockRequest) SetBlockIdentifier(v RosettaPartialBlockIdentifier) {
	o.BlockIdentifier = v
}

func (o RosettaBlockRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["network_identifier"] = o.NetworkIdentifier
	}
	if true {
		toSerialize["block_identifier"] = o.BlockIdentifier
	}
	return json.Marshal(toSerialize)
}

type NullableRosettaBlockRequest struct {
	value *RosettaBlockRequest
	isSet bool
}

func (v NullableRosettaBlockRequest) Get() *RosettaBlockRequest {
	return v.value
}

func (v *NullableRosettaBlockRequest) Set(val *RosettaBlockRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRosettaBlockRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRosettaBlockRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRosettaBlockRequest(val *RosettaBlockRequest) *NullableRosettaBlockRequest {
	return &NullableRosettaBlockRequest{value: val, isSet: true}
}

func (v NullableRosettaBlockRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRosettaBlockRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


