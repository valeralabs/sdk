/*
Stacks Blockchain API

Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

API version: v4.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AddressSearchResultResultMetadata struct for AddressSearchResultResultMetadata
type AddressSearchResultResultMetadata struct {
	AddressStxBalanceResponse *AddressStxBalanceResponse
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *AddressSearchResultResultMetadata) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into AddressStxBalanceResponse
	err = json.Unmarshal(data, &dst.AddressStxBalanceResponse);
	if err == nil {
		jsonAddressStxBalanceResponse, _ := json.Marshal(dst.AddressStxBalanceResponse)
		if string(jsonAddressStxBalanceResponse) == "{}" { // empty struct
			dst.AddressStxBalanceResponse = nil
		} else {
			return nil // data stored in dst.AddressStxBalanceResponse, return on the first match
		}
	} else {
		dst.AddressStxBalanceResponse = nil
	}

	return fmt.Errorf("Data failed to match schemas in anyOf(AddressSearchResultResultMetadata)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *AddressSearchResultResultMetadata) MarshalJSON() ([]byte, error) {
	if src.AddressStxBalanceResponse != nil {
		return json.Marshal(&src.AddressStxBalanceResponse)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableAddressSearchResultResultMetadata struct {
	value *AddressSearchResultResultMetadata
	isSet bool
}

func (v NullableAddressSearchResultResultMetadata) Get() *AddressSearchResultResultMetadata {
	return v.value
}

func (v *NullableAddressSearchResultResultMetadata) Set(val *AddressSearchResultResultMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressSearchResultResultMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressSearchResultResultMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressSearchResultResultMetadata(val *AddressSearchResultResultMetadata) *NullableAddressSearchResultResultMetadata {
	return &NullableAddressSearchResultResultMetadata{value: val, isSet: true}
}

func (v NullableAddressSearchResultResultMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressSearchResultResultMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


