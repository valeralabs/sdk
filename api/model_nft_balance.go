/*
Stacks Blockchain API

Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

API version: v4.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NftBalance struct for NftBalance
type NftBalance struct {
	Count string `json:"count"`
	TotalSent string `json:"total_sent"`
	TotalReceived string `json:"total_received"`
}

// NewNftBalance instantiates a new NftBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNftBalance(count string, totalSent string, totalReceived string) *NftBalance {
	this := NftBalance{}
	this.Count = count
	this.TotalSent = totalSent
	this.TotalReceived = totalReceived
	return &this
}

// NewNftBalanceWithDefaults instantiates a new NftBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNftBalanceWithDefaults() *NftBalance {
	this := NftBalance{}
	return &this
}

// GetCount returns the Count field value
func (o *NftBalance) GetCount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *NftBalance) GetCountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *NftBalance) SetCount(v string) {
	o.Count = v
}

// GetTotalSent returns the TotalSent field value
func (o *NftBalance) GetTotalSent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TotalSent
}

// GetTotalSentOk returns a tuple with the TotalSent field value
// and a boolean to check if the value has been set.
func (o *NftBalance) GetTotalSentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalSent, true
}

// SetTotalSent sets field value
func (o *NftBalance) SetTotalSent(v string) {
	o.TotalSent = v
}

// GetTotalReceived returns the TotalReceived field value
func (o *NftBalance) GetTotalReceived() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TotalReceived
}

// GetTotalReceivedOk returns a tuple with the TotalReceived field value
// and a boolean to check if the value has been set.
func (o *NftBalance) GetTotalReceivedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalReceived, true
}

// SetTotalReceived sets field value
func (o *NftBalance) SetTotalReceived(v string) {
	o.TotalReceived = v
}

func (o NftBalance) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["count"] = o.Count
	}
	if true {
		toSerialize["total_sent"] = o.TotalSent
	}
	if true {
		toSerialize["total_received"] = o.TotalReceived
	}
	return json.Marshal(toSerialize)
}

type NullableNftBalance struct {
	value *NftBalance
	isSet bool
}

func (v NullableNftBalance) Get() *NftBalance {
	return v.value
}

func (v *NullableNftBalance) Set(val *NftBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableNftBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableNftBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNftBalance(val *NftBalance) *NullableNftBalance {
	return &NullableNftBalance{value: val, isSet: true}
}

func (v NullableNftBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNftBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


