/*
Stacks Blockchain API

Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

API version: v4.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FeeRate Get fee rate information.
type FeeRate struct {
	FeeRate int32 `json:"fee_rate"`
}

// NewFeeRate instantiates a new FeeRate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeeRate(feeRate int32) *FeeRate {
	this := FeeRate{}
	this.FeeRate = feeRate
	return &this
}

// NewFeeRateWithDefaults instantiates a new FeeRate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeeRateWithDefaults() *FeeRate {
	this := FeeRate{}
	return &this
}

// GetFeeRate returns the FeeRate field value
func (o *FeeRate) GetFeeRate() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FeeRate
}

// GetFeeRateOk returns a tuple with the FeeRate field value
// and a boolean to check if the value has been set.
func (o *FeeRate) GetFeeRateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeRate, true
}

// SetFeeRate sets field value
func (o *FeeRate) SetFeeRate(v int32) {
	o.FeeRate = v
}

func (o FeeRate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["fee_rate"] = o.FeeRate
	}
	return json.Marshal(toSerialize)
}

type NullableFeeRate struct {
	value *FeeRate
	isSet bool
}

func (v NullableFeeRate) Get() *FeeRate {
	return v.value
}

func (v *NullableFeeRate) Set(val *FeeRate) {
	v.value = val
	v.isSet = true
}

func (v NullableFeeRate) IsSet() bool {
	return v.isSet
}

func (v *NullableFeeRate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeeRate(val *FeeRate) *NullableFeeRate {
	return &NullableFeeRate{value: val, isSet: true}
}

func (v NullableFeeRate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeeRate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


