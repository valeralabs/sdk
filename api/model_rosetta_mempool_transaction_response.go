/*
Stacks Blockchain API

Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

API version: v4.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RosettaMempoolTransactionResponse A MempoolTransactionResponse contains an estimate of a mempool transaction. It may not be possible to know the full impact of a transaction in the mempool (ex: fee paid).
type RosettaMempoolTransactionResponse struct {
	Transaction RosettaTransaction `json:"transaction"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

// NewRosettaMempoolTransactionResponse instantiates a new RosettaMempoolTransactionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRosettaMempoolTransactionResponse(transaction RosettaTransaction) *RosettaMempoolTransactionResponse {
	this := RosettaMempoolTransactionResponse{}
	this.Transaction = transaction
	return &this
}

// NewRosettaMempoolTransactionResponseWithDefaults instantiates a new RosettaMempoolTransactionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRosettaMempoolTransactionResponseWithDefaults() *RosettaMempoolTransactionResponse {
	this := RosettaMempoolTransactionResponse{}
	return &this
}

// GetTransaction returns the Transaction field value
func (o *RosettaMempoolTransactionResponse) GetTransaction() RosettaTransaction {
	if o == nil {
		var ret RosettaTransaction
		return ret
	}

	return o.Transaction
}

// GetTransactionOk returns a tuple with the Transaction field value
// and a boolean to check if the value has been set.
func (o *RosettaMempoolTransactionResponse) GetTransactionOk() (*RosettaTransaction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Transaction, true
}

// SetTransaction sets field value
func (o *RosettaMempoolTransactionResponse) SetTransaction(v RosettaTransaction) {
	o.Transaction = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *RosettaMempoolTransactionResponse) GetMetadata() map[string]interface{} {
	if o == nil || o.Metadata == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RosettaMempoolTransactionResponse) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *RosettaMempoolTransactionResponse) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *RosettaMempoolTransactionResponse) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

func (o RosettaMempoolTransactionResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["transaction"] = o.Transaction
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return json.Marshal(toSerialize)
}

type NullableRosettaMempoolTransactionResponse struct {
	value *RosettaMempoolTransactionResponse
	isSet bool
}

func (v NullableRosettaMempoolTransactionResponse) Get() *RosettaMempoolTransactionResponse {
	return v.value
}

func (v *NullableRosettaMempoolTransactionResponse) Set(val *RosettaMempoolTransactionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRosettaMempoolTransactionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRosettaMempoolTransactionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRosettaMempoolTransactionResponse(val *RosettaMempoolTransactionResponse) *NullableRosettaMempoolTransactionResponse {
	return &NullableRosettaMempoolTransactionResponse{value: val, isSet: true}
}

func (v NullableRosettaMempoolTransactionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRosettaMempoolTransactionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


