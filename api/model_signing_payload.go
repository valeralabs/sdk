/*
Stacks Blockchain API

Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

API version: v4.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SigningPayload SigningPayload is signed by the client with the keypair associated with an address using the specified SignatureType. SignatureType can be optionally populated if there is a restriction on the signature scheme that can be used to sign the payload.
type SigningPayload struct {
	// [DEPRECATED by account_identifier in v1.4.4] The network-specific address of the account that should sign the payload.
	Address *string `json:"address,omitempty"`
	AccountIdentifier *RosettaAccount `json:"account_identifier,omitempty"`
	HexBytes string `json:"hex_bytes"`
	// SignatureType is the type of a cryptographic signature.
	SignatureType *string `json:"signature_type,omitempty"`
}

// NewSigningPayload instantiates a new SigningPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSigningPayload(hexBytes string) *SigningPayload {
	this := SigningPayload{}
	this.HexBytes = hexBytes
	return &this
}

// NewSigningPayloadWithDefaults instantiates a new SigningPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSigningPayloadWithDefaults() *SigningPayload {
	this := SigningPayload{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *SigningPayload) GetAddress() string {
	if o == nil || o.Address == nil {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SigningPayload) GetAddressOk() (*string, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *SigningPayload) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *SigningPayload) SetAddress(v string) {
	o.Address = &v
}

// GetAccountIdentifier returns the AccountIdentifier field value if set, zero value otherwise.
func (o *SigningPayload) GetAccountIdentifier() RosettaAccount {
	if o == nil || o.AccountIdentifier == nil {
		var ret RosettaAccount
		return ret
	}
	return *o.AccountIdentifier
}

// GetAccountIdentifierOk returns a tuple with the AccountIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SigningPayload) GetAccountIdentifierOk() (*RosettaAccount, bool) {
	if o == nil || o.AccountIdentifier == nil {
		return nil, false
	}
	return o.AccountIdentifier, true
}

// HasAccountIdentifier returns a boolean if a field has been set.
func (o *SigningPayload) HasAccountIdentifier() bool {
	if o != nil && o.AccountIdentifier != nil {
		return true
	}

	return false
}

// SetAccountIdentifier gets a reference to the given RosettaAccount and assigns it to the AccountIdentifier field.
func (o *SigningPayload) SetAccountIdentifier(v RosettaAccount) {
	o.AccountIdentifier = &v
}

// GetHexBytes returns the HexBytes field value
func (o *SigningPayload) GetHexBytes() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HexBytes
}

// GetHexBytesOk returns a tuple with the HexBytes field value
// and a boolean to check if the value has been set.
func (o *SigningPayload) GetHexBytesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HexBytes, true
}

// SetHexBytes sets field value
func (o *SigningPayload) SetHexBytes(v string) {
	o.HexBytes = v
}

// GetSignatureType returns the SignatureType field value if set, zero value otherwise.
func (o *SigningPayload) GetSignatureType() string {
	if o == nil || o.SignatureType == nil {
		var ret string
		return ret
	}
	return *o.SignatureType
}

// GetSignatureTypeOk returns a tuple with the SignatureType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SigningPayload) GetSignatureTypeOk() (*string, bool) {
	if o == nil || o.SignatureType == nil {
		return nil, false
	}
	return o.SignatureType, true
}

// HasSignatureType returns a boolean if a field has been set.
func (o *SigningPayload) HasSignatureType() bool {
	if o != nil && o.SignatureType != nil {
		return true
	}

	return false
}

// SetSignatureType gets a reference to the given string and assigns it to the SignatureType field.
func (o *SigningPayload) SetSignatureType(v string) {
	o.SignatureType = &v
}

func (o SigningPayload) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if o.AccountIdentifier != nil {
		toSerialize["account_identifier"] = o.AccountIdentifier
	}
	if true {
		toSerialize["hex_bytes"] = o.HexBytes
	}
	if o.SignatureType != nil {
		toSerialize["signature_type"] = o.SignatureType
	}
	return json.Marshal(toSerialize)
}

type NullableSigningPayload struct {
	value *SigningPayload
	isSet bool
}

func (v NullableSigningPayload) Get() *SigningPayload {
	return v.value
}

func (v *NullableSigningPayload) Set(val *SigningPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableSigningPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableSigningPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSigningPayload(val *SigningPayload) *NullableSigningPayload {
	return &NullableSigningPayload{value: val, isSet: true}
}

func (v NullableSigningPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSigningPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


