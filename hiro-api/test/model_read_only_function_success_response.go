/*
Stacks Blockchain API

Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

API version: STACKS_API_VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ReadOnlyFunctionSuccessResponse GET request to get contract source
type ReadOnlyFunctionSuccessResponse struct {
	Okay bool `json:"okay"`
	Result *string `json:"result,omitempty"`
	Cause *string `json:"cause,omitempty"`
}

// NewReadOnlyFunctionSuccessResponse instantiates a new ReadOnlyFunctionSuccessResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReadOnlyFunctionSuccessResponse(okay bool) *ReadOnlyFunctionSuccessResponse {
	this := ReadOnlyFunctionSuccessResponse{}
	this.Okay = okay
	return &this
}

// NewReadOnlyFunctionSuccessResponseWithDefaults instantiates a new ReadOnlyFunctionSuccessResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReadOnlyFunctionSuccessResponseWithDefaults() *ReadOnlyFunctionSuccessResponse {
	this := ReadOnlyFunctionSuccessResponse{}
	return &this
}

// GetOkay returns the Okay field value
func (o *ReadOnlyFunctionSuccessResponse) GetOkay() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Okay
}

// GetOkayOk returns a tuple with the Okay field value
// and a boolean to check if the value has been set.
func (o *ReadOnlyFunctionSuccessResponse) GetOkayOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Okay, true
}

// SetOkay sets field value
func (o *ReadOnlyFunctionSuccessResponse) SetOkay(v bool) {
	o.Okay = v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *ReadOnlyFunctionSuccessResponse) GetResult() string {
	if o == nil || o.Result == nil {
		var ret string
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReadOnlyFunctionSuccessResponse) GetResultOk() (*string, bool) {
	if o == nil || o.Result == nil {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *ReadOnlyFunctionSuccessResponse) HasResult() bool {
	if o != nil && o.Result != nil {
		return true
	}

	return false
}

// SetResult gets a reference to the given string and assigns it to the Result field.
func (o *ReadOnlyFunctionSuccessResponse) SetResult(v string) {
	o.Result = &v
}

// GetCause returns the Cause field value if set, zero value otherwise.
func (o *ReadOnlyFunctionSuccessResponse) GetCause() string {
	if o == nil || o.Cause == nil {
		var ret string
		return ret
	}
	return *o.Cause
}

// GetCauseOk returns a tuple with the Cause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReadOnlyFunctionSuccessResponse) GetCauseOk() (*string, bool) {
	if o == nil || o.Cause == nil {
		return nil, false
	}
	return o.Cause, true
}

// HasCause returns a boolean if a field has been set.
func (o *ReadOnlyFunctionSuccessResponse) HasCause() bool {
	if o != nil && o.Cause != nil {
		return true
	}

	return false
}

// SetCause gets a reference to the given string and assigns it to the Cause field.
func (o *ReadOnlyFunctionSuccessResponse) SetCause(v string) {
	o.Cause = &v
}

func (o ReadOnlyFunctionSuccessResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["okay"] = o.Okay
	}
	if o.Result != nil {
		toSerialize["result"] = o.Result
	}
	if o.Cause != nil {
		toSerialize["cause"] = o.Cause
	}
	return json.Marshal(toSerialize)
}

type NullableReadOnlyFunctionSuccessResponse struct {
	value *ReadOnlyFunctionSuccessResponse
	isSet bool
}

func (v NullableReadOnlyFunctionSuccessResponse) Get() *ReadOnlyFunctionSuccessResponse {
	return v.value
}

func (v *NullableReadOnlyFunctionSuccessResponse) Set(val *ReadOnlyFunctionSuccessResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableReadOnlyFunctionSuccessResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableReadOnlyFunctionSuccessResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReadOnlyFunctionSuccessResponse(val *ReadOnlyFunctionSuccessResponse) *NullableReadOnlyFunctionSuccessResponse {
	return &NullableReadOnlyFunctionSuccessResponse{value: val, isSet: true}
}

func (v NullableReadOnlyFunctionSuccessResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReadOnlyFunctionSuccessResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


