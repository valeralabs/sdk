/*
Stacks Blockchain API

Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

API version: STACKS_API_VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RosettaTransaction Transactions contain an array of Operations that are attributable to the same TransactionIdentifier.
type RosettaTransaction struct {
	TransactionIdentifier Object `json:"transaction_identifier"`
	// List of operations
	Operations []Object `json:"operations"`
	Metadata *RosettaTransactionMetadata `json:"metadata,omitempty"`
}

// NewRosettaTransaction instantiates a new RosettaTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRosettaTransaction(transactionIdentifier Object, operations []Object) *RosettaTransaction {
	this := RosettaTransaction{}
	this.TransactionIdentifier = transactionIdentifier
	this.Operations = operations
	return &this
}

// NewRosettaTransactionWithDefaults instantiates a new RosettaTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRosettaTransactionWithDefaults() *RosettaTransaction {
	this := RosettaTransaction{}
	return &this
}

// GetTransactionIdentifier returns the TransactionIdentifier field value
func (o *RosettaTransaction) GetTransactionIdentifier() Object {
	if o == nil {
		var ret Object
		return ret
	}

	return o.TransactionIdentifier
}

// GetTransactionIdentifierOk returns a tuple with the TransactionIdentifier field value
// and a boolean to check if the value has been set.
func (o *RosettaTransaction) GetTransactionIdentifierOk() (*Object, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionIdentifier, true
}

// SetTransactionIdentifier sets field value
func (o *RosettaTransaction) SetTransactionIdentifier(v Object) {
	o.TransactionIdentifier = v
}

// GetOperations returns the Operations field value
func (o *RosettaTransaction) GetOperations() []Object {
	if o == nil {
		var ret []Object
		return ret
	}

	return o.Operations
}

// GetOperationsOk returns a tuple with the Operations field value
// and a boolean to check if the value has been set.
func (o *RosettaTransaction) GetOperationsOk() ([]Object, bool) {
	if o == nil {
		return nil, false
	}
	return o.Operations, true
}

// SetOperations sets field value
func (o *RosettaTransaction) SetOperations(v []Object) {
	o.Operations = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *RosettaTransaction) GetMetadata() RosettaTransactionMetadata {
	if o == nil || o.Metadata == nil {
		var ret RosettaTransactionMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RosettaTransaction) GetMetadataOk() (*RosettaTransactionMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *RosettaTransaction) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given RosettaTransactionMetadata and assigns it to the Metadata field.
func (o *RosettaTransaction) SetMetadata(v RosettaTransactionMetadata) {
	o.Metadata = &v
}

func (o RosettaTransaction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["transaction_identifier"] = o.TransactionIdentifier
	}
	if true {
		toSerialize["operations"] = o.Operations
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return json.Marshal(toSerialize)
}

type NullableRosettaTransaction struct {
	value *RosettaTransaction
	isSet bool
}

func (v NullableRosettaTransaction) Get() *RosettaTransaction {
	return v.value
}

func (v *NullableRosettaTransaction) Set(val *RosettaTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableRosettaTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableRosettaTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRosettaTransaction(val *RosettaTransaction) *NullableRosettaTransaction {
	return &NullableRosettaTransaction{value: val, isSet: true}
}

func (v NullableRosettaTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRosettaTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


