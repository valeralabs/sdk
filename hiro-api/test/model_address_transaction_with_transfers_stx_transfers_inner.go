/*
Stacks Blockchain API

Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

API version: STACKS_API_VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AddressTransactionWithTransfersStxTransfersInner struct for AddressTransactionWithTransfersStxTransfersInner
type AddressTransactionWithTransfersStxTransfersInner struct {
	// Amount transferred in micro-STX as an integer string.
	Amount string `json:"amount"`
	// Principal that sent STX. This is unspecified if the STX were minted.
	Sender *string `json:"sender,omitempty"`
	// Principal that received STX. This is unspecified if the STX were burned.
	Recipient *string `json:"recipient,omitempty"`
}

// NewAddressTransactionWithTransfersStxTransfersInner instantiates a new AddressTransactionWithTransfersStxTransfersInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressTransactionWithTransfersStxTransfersInner(amount string) *AddressTransactionWithTransfersStxTransfersInner {
	this := AddressTransactionWithTransfersStxTransfersInner{}
	this.Amount = amount
	return &this
}

// NewAddressTransactionWithTransfersStxTransfersInnerWithDefaults instantiates a new AddressTransactionWithTransfersStxTransfersInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressTransactionWithTransfersStxTransfersInnerWithDefaults() *AddressTransactionWithTransfersStxTransfersInner {
	this := AddressTransactionWithTransfersStxTransfersInner{}
	return &this
}

// GetAmount returns the Amount field value
func (o *AddressTransactionWithTransfersStxTransfersInner) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *AddressTransactionWithTransfersStxTransfersInner) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *AddressTransactionWithTransfersStxTransfersInner) SetAmount(v string) {
	o.Amount = v
}

// GetSender returns the Sender field value if set, zero value otherwise.
func (o *AddressTransactionWithTransfersStxTransfersInner) GetSender() string {
	if o == nil || o.Sender == nil {
		var ret string
		return ret
	}
	return *o.Sender
}

// GetSenderOk returns a tuple with the Sender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressTransactionWithTransfersStxTransfersInner) GetSenderOk() (*string, bool) {
	if o == nil || o.Sender == nil {
		return nil, false
	}
	return o.Sender, true
}

// HasSender returns a boolean if a field has been set.
func (o *AddressTransactionWithTransfersStxTransfersInner) HasSender() bool {
	if o != nil && o.Sender != nil {
		return true
	}

	return false
}

// SetSender gets a reference to the given string and assigns it to the Sender field.
func (o *AddressTransactionWithTransfersStxTransfersInner) SetSender(v string) {
	o.Sender = &v
}

// GetRecipient returns the Recipient field value if set, zero value otherwise.
func (o *AddressTransactionWithTransfersStxTransfersInner) GetRecipient() string {
	if o == nil || o.Recipient == nil {
		var ret string
		return ret
	}
	return *o.Recipient
}

// GetRecipientOk returns a tuple with the Recipient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressTransactionWithTransfersStxTransfersInner) GetRecipientOk() (*string, bool) {
	if o == nil || o.Recipient == nil {
		return nil, false
	}
	return o.Recipient, true
}

// HasRecipient returns a boolean if a field has been set.
func (o *AddressTransactionWithTransfersStxTransfersInner) HasRecipient() bool {
	if o != nil && o.Recipient != nil {
		return true
	}

	return false
}

// SetRecipient gets a reference to the given string and assigns it to the Recipient field.
func (o *AddressTransactionWithTransfersStxTransfersInner) SetRecipient(v string) {
	o.Recipient = &v
}

func (o AddressTransactionWithTransfersStxTransfersInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if o.Sender != nil {
		toSerialize["sender"] = o.Sender
	}
	if o.Recipient != nil {
		toSerialize["recipient"] = o.Recipient
	}
	return json.Marshal(toSerialize)
}

type NullableAddressTransactionWithTransfersStxTransfersInner struct {
	value *AddressTransactionWithTransfersStxTransfersInner
	isSet bool
}

func (v NullableAddressTransactionWithTransfersStxTransfersInner) Get() *AddressTransactionWithTransfersStxTransfersInner {
	return v.value
}

func (v *NullableAddressTransactionWithTransfersStxTransfersInner) Set(val *AddressTransactionWithTransfersStxTransfersInner) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressTransactionWithTransfersStxTransfersInner) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressTransactionWithTransfersStxTransfersInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressTransactionWithTransfersStxTransfersInner(val *AddressTransactionWithTransfersStxTransfersInner) *NullableAddressTransactionWithTransfersStxTransfersInner {
	return &NullableAddressTransactionWithTransfersStxTransfersInner{value: val, isSet: true}
}

func (v NullableAddressTransactionWithTransfersStxTransfersInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressTransactionWithTransfersStxTransfersInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


