/*
Stacks Blockchain API

Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

API version: STACKS_API_VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransactionEventsResponse GET event for the given transaction
type TransactionEventsResponse struct {
	Limit int32 `json:"limit"`
	Offset int32 `json:"offset"`
	Results []Object `json:"results"`
}

// NewTransactionEventsResponse instantiates a new TransactionEventsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionEventsResponse(limit int32, offset int32, results []Object) *TransactionEventsResponse {
	this := TransactionEventsResponse{}
	this.Limit = limit
	this.Offset = offset
	this.Results = results
	return &this
}

// NewTransactionEventsResponseWithDefaults instantiates a new TransactionEventsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionEventsResponseWithDefaults() *TransactionEventsResponse {
	this := TransactionEventsResponse{}
	return &this
}

// GetLimit returns the Limit field value
func (o *TransactionEventsResponse) GetLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *TransactionEventsResponse) GetLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *TransactionEventsResponse) SetLimit(v int32) {
	o.Limit = v
}

// GetOffset returns the Offset field value
func (o *TransactionEventsResponse) GetOffset() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
func (o *TransactionEventsResponse) GetOffsetOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offset, true
}

// SetOffset sets field value
func (o *TransactionEventsResponse) SetOffset(v int32) {
	o.Offset = v
}

// GetResults returns the Results field value
func (o *TransactionEventsResponse) GetResults() []Object {
	if o == nil {
		var ret []Object
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *TransactionEventsResponse) GetResultsOk() ([]Object, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *TransactionEventsResponse) SetResults(v []Object) {
	o.Results = v
}

func (o TransactionEventsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["limit"] = o.Limit
	}
	if true {
		toSerialize["offset"] = o.Offset
	}
	if true {
		toSerialize["results"] = o.Results
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionEventsResponse struct {
	value *TransactionEventsResponse
	isSet bool
}

func (v NullableTransactionEventsResponse) Get() *TransactionEventsResponse {
	return v.value
}

func (v *NullableTransactionEventsResponse) Set(val *TransactionEventsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionEventsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionEventsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionEventsResponse(val *TransactionEventsResponse) *NullableTransactionEventsResponse {
	return &NullableTransactionEventsResponse{value: val, isSet: true}
}

func (v NullableTransactionEventsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionEventsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


