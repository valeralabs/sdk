/*
Stacks Blockchain API

Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

API version: STACKS_API_VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransactionEventSmartContractLogAllOfContractLog struct for TransactionEventSmartContractLogAllOfContractLog
type TransactionEventSmartContractLogAllOfContractLog struct {
	ContractId string `json:"contract_id"`
	Topic string `json:"topic"`
	Value PostConditionNonFungibleAllOfAssetValue `json:"value"`
}

// NewTransactionEventSmartContractLogAllOfContractLog instantiates a new TransactionEventSmartContractLogAllOfContractLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionEventSmartContractLogAllOfContractLog(contractId string, topic string, value PostConditionNonFungibleAllOfAssetValue) *TransactionEventSmartContractLogAllOfContractLog {
	this := TransactionEventSmartContractLogAllOfContractLog{}
	this.ContractId = contractId
	this.Topic = topic
	this.Value = value
	return &this
}

// NewTransactionEventSmartContractLogAllOfContractLogWithDefaults instantiates a new TransactionEventSmartContractLogAllOfContractLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionEventSmartContractLogAllOfContractLogWithDefaults() *TransactionEventSmartContractLogAllOfContractLog {
	this := TransactionEventSmartContractLogAllOfContractLog{}
	return &this
}

// GetContractId returns the ContractId field value
func (o *TransactionEventSmartContractLogAllOfContractLog) GetContractId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContractId
}

// GetContractIdOk returns a tuple with the ContractId field value
// and a boolean to check if the value has been set.
func (o *TransactionEventSmartContractLogAllOfContractLog) GetContractIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractId, true
}

// SetContractId sets field value
func (o *TransactionEventSmartContractLogAllOfContractLog) SetContractId(v string) {
	o.ContractId = v
}

// GetTopic returns the Topic field value
func (o *TransactionEventSmartContractLogAllOfContractLog) GetTopic() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Topic
}

// GetTopicOk returns a tuple with the Topic field value
// and a boolean to check if the value has been set.
func (o *TransactionEventSmartContractLogAllOfContractLog) GetTopicOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Topic, true
}

// SetTopic sets field value
func (o *TransactionEventSmartContractLogAllOfContractLog) SetTopic(v string) {
	o.Topic = v
}

// GetValue returns the Value field value
func (o *TransactionEventSmartContractLogAllOfContractLog) GetValue() PostConditionNonFungibleAllOfAssetValue {
	if o == nil {
		var ret PostConditionNonFungibleAllOfAssetValue
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *TransactionEventSmartContractLogAllOfContractLog) GetValueOk() (*PostConditionNonFungibleAllOfAssetValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *TransactionEventSmartContractLogAllOfContractLog) SetValue(v PostConditionNonFungibleAllOfAssetValue) {
	o.Value = v
}

func (o TransactionEventSmartContractLogAllOfContractLog) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["contract_id"] = o.ContractId
	}
	if true {
		toSerialize["topic"] = o.Topic
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionEventSmartContractLogAllOfContractLog struct {
	value *TransactionEventSmartContractLogAllOfContractLog
	isSet bool
}

func (v NullableTransactionEventSmartContractLogAllOfContractLog) Get() *TransactionEventSmartContractLogAllOfContractLog {
	return v.value
}

func (v *NullableTransactionEventSmartContractLogAllOfContractLog) Set(val *TransactionEventSmartContractLogAllOfContractLog) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionEventSmartContractLogAllOfContractLog) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionEventSmartContractLogAllOfContractLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionEventSmartContractLogAllOfContractLog(val *TransactionEventSmartContractLogAllOfContractLog) *NullableTransactionEventSmartContractLogAllOfContractLog {
	return &NullableTransactionEventSmartContractLogAllOfContractLog{value: val, isSet: true}
}

func (v NullableTransactionEventSmartContractLogAllOfContractLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionEventSmartContractLogAllOfContractLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


