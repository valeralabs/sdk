/*
Stacks Blockchain API

Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

API version: STACKS_API_VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AbstractTransactionEvent struct for AbstractTransactionEvent
type AbstractTransactionEvent struct {
	EventIndex int32 `json:"event_index"`
}

// NewAbstractTransactionEvent instantiates a new AbstractTransactionEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbstractTransactionEvent(eventIndex int32) *AbstractTransactionEvent {
	this := AbstractTransactionEvent{}
	this.EventIndex = eventIndex
	return &this
}

// NewAbstractTransactionEventWithDefaults instantiates a new AbstractTransactionEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbstractTransactionEventWithDefaults() *AbstractTransactionEvent {
	this := AbstractTransactionEvent{}
	return &this
}

// GetEventIndex returns the EventIndex field value
func (o *AbstractTransactionEvent) GetEventIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EventIndex
}

// GetEventIndexOk returns a tuple with the EventIndex field value
// and a boolean to check if the value has been set.
func (o *AbstractTransactionEvent) GetEventIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventIndex, true
}

// SetEventIndex sets field value
func (o *AbstractTransactionEvent) SetEventIndex(v int32) {
	o.EventIndex = v
}

func (o AbstractTransactionEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["event_index"] = o.EventIndex
	}
	return json.Marshal(toSerialize)
}

type NullableAbstractTransactionEvent struct {
	value *AbstractTransactionEvent
	isSet bool
}

func (v NullableAbstractTransactionEvent) Get() *AbstractTransactionEvent {
	return v.value
}

func (v *NullableAbstractTransactionEvent) Set(val *AbstractTransactionEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableAbstractTransactionEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableAbstractTransactionEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbstractTransactionEvent(val *AbstractTransactionEvent) *NullableAbstractTransactionEvent {
	return &NullableAbstractTransactionEvent{value: val, isSet: true}
}

func (v NullableAbstractTransactionEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbstractTransactionEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


