/*
Stacks Blockchain API

Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

API version: STACKS_API_VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MempoolTransaction Describes all transaction types on Stacks 2.0 blockchain
type MempoolTransaction struct {
	MempoolTokenTransferTransaction *MempoolTokenTransferTransaction
	map[string]interface{} *map[string]interface{}
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *MempoolTransaction) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into MempoolTokenTransferTransaction
	err = json.Unmarshal(data, &dst.MempoolTokenTransferTransaction);
	if err == nil {
		jsonMempoolTokenTransferTransaction, _ := json.Marshal(dst.MempoolTokenTransferTransaction)
		if string(jsonMempoolTokenTransferTransaction) == "{}" { // empty struct
			dst.MempoolTokenTransferTransaction = nil
		} else {
			return nil // data stored in dst.MempoolTokenTransferTransaction, return on the first match
		}
	} else {
		dst.MempoolTokenTransferTransaction = nil
	}

	// try to unmarshal JSON data into map[string]interface{}
	err = json.Unmarshal(data, &dst.map[string]interface{});
	if err == nil {
		jsonmap[string]interface{}, _ := json.Marshal(dst.map[string]interface{})
		if string(jsonmap[string]interface{}) == "{}" { // empty struct
			dst.map[string]interface{} = nil
		} else {
			return nil // data stored in dst.map[string]interface{}, return on the first match
		}
	} else {
		dst.map[string]interface{} = nil
	}

	return fmt.Errorf("Data failed to match schemas in anyOf(MempoolTransaction)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *MempoolTransaction) MarshalJSON() ([]byte, error) {
	if src.MempoolTokenTransferTransaction != nil {
		return json.Marshal(&src.MempoolTokenTransferTransaction)
	}

	if src.map[string]interface{} != nil {
		return json.Marshal(&src.map[string]interface{})
	}

	return nil, nil // no data in anyOf schemas
}

type NullableMempoolTransaction struct {
	value *MempoolTransaction
	isSet bool
}

func (v NullableMempoolTransaction) Get() *MempoolTransaction {
	return v.value
}

func (v *NullableMempoolTransaction) Set(val *MempoolTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableMempoolTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableMempoolTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMempoolTransaction(val *MempoolTransaction) *NullableMempoolTransaction {
	return &NullableMempoolTransaction{value: val, isSet: true}
}

func (v NullableMempoolTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMempoolTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


