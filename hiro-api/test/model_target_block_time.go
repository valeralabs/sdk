/*
Stacks Blockchain API

Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

API version: STACKS_API_VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TargetBlockTime struct for TargetBlockTime
type TargetBlockTime struct {
	TargetBlockTime int32 `json:"target_block_time"`
}

// NewTargetBlockTime instantiates a new TargetBlockTime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetBlockTime(targetBlockTime int32) *TargetBlockTime {
	this := TargetBlockTime{}
	this.TargetBlockTime = targetBlockTime
	return &this
}

// NewTargetBlockTimeWithDefaults instantiates a new TargetBlockTime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetBlockTimeWithDefaults() *TargetBlockTime {
	this := TargetBlockTime{}
	return &this
}

// GetTargetBlockTime returns the TargetBlockTime field value
func (o *TargetBlockTime) GetTargetBlockTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TargetBlockTime
}

// GetTargetBlockTimeOk returns a tuple with the TargetBlockTime field value
// and a boolean to check if the value has been set.
func (o *TargetBlockTime) GetTargetBlockTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetBlockTime, true
}

// SetTargetBlockTime sets field value
func (o *TargetBlockTime) SetTargetBlockTime(v int32) {
	o.TargetBlockTime = v
}

func (o TargetBlockTime) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["target_block_time"] = o.TargetBlockTime
	}
	return json.Marshal(toSerialize)
}

type NullableTargetBlockTime struct {
	value *TargetBlockTime
	isSet bool
}

func (v NullableTargetBlockTime) Get() *TargetBlockTime {
	return v.value
}

func (v *NullableTargetBlockTime) Set(val *TargetBlockTime) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetBlockTime) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetBlockTime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetBlockTime(val *TargetBlockTime) *NullableTargetBlockTime {
	return &NullableTargetBlockTime{value: val, isSet: true}
}

func (v NullableTargetBlockTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetBlockTime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


