/*
Stacks Blockchain API

Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

API version: STACKS_API_VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RosettaBlockIdentifierHash This is also known as the block hash.
type RosettaBlockIdentifierHash struct {
	// This is also known as the block hash.
	Hash string `json:"hash"`
}

// NewRosettaBlockIdentifierHash instantiates a new RosettaBlockIdentifierHash object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRosettaBlockIdentifierHash(hash string) *RosettaBlockIdentifierHash {
	this := RosettaBlockIdentifierHash{}
	this.Hash = hash
	return &this
}

// NewRosettaBlockIdentifierHashWithDefaults instantiates a new RosettaBlockIdentifierHash object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRosettaBlockIdentifierHashWithDefaults() *RosettaBlockIdentifierHash {
	this := RosettaBlockIdentifierHash{}
	return &this
}

// GetHash returns the Hash field value
func (o *RosettaBlockIdentifierHash) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *RosettaBlockIdentifierHash) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *RosettaBlockIdentifierHash) SetHash(v string) {
	o.Hash = v
}

func (o RosettaBlockIdentifierHash) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["hash"] = o.Hash
	}
	return json.Marshal(toSerialize)
}

type NullableRosettaBlockIdentifierHash struct {
	value *RosettaBlockIdentifierHash
	isSet bool
}

func (v NullableRosettaBlockIdentifierHash) Get() *RosettaBlockIdentifierHash {
	return v.value
}

func (v *NullableRosettaBlockIdentifierHash) Set(val *RosettaBlockIdentifierHash) {
	v.value = val
	v.isSet = true
}

func (v NullableRosettaBlockIdentifierHash) IsSet() bool {
	return v.isSet
}

func (v *NullableRosettaBlockIdentifierHash) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRosettaBlockIdentifierHash(val *RosettaBlockIdentifierHash) *NullableRosettaBlockIdentifierHash {
	return &NullableRosettaBlockIdentifierHash{value: val, isSet: true}
}

func (v NullableRosettaBlockIdentifierHash) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRosettaBlockIdentifierHash) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


