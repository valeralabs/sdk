/*
Stacks Blockchain API

Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

API version: STACKS_API_VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RunFaucetResponse POST request that initiates a transfer of tokens to a specified testnet address
type RunFaucetResponse struct {
	// Indicates if the faucet call was successful
	Success bool `json:"success"`
	// The transaction ID for the faucet call
	TxId *string `json:"txId,omitempty"`
	// Raw transaction in hex string representation
	TxRaw *string `json:"txRaw,omitempty"`
}

// NewRunFaucetResponse instantiates a new RunFaucetResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunFaucetResponse(success bool) *RunFaucetResponse {
	this := RunFaucetResponse{}
	this.Success = success
	return &this
}

// NewRunFaucetResponseWithDefaults instantiates a new RunFaucetResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunFaucetResponseWithDefaults() *RunFaucetResponse {
	this := RunFaucetResponse{}
	return &this
}

// GetSuccess returns the Success field value
func (o *RunFaucetResponse) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *RunFaucetResponse) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *RunFaucetResponse) SetSuccess(v bool) {
	o.Success = v
}

// GetTxId returns the TxId field value if set, zero value otherwise.
func (o *RunFaucetResponse) GetTxId() string {
	if o == nil || o.TxId == nil {
		var ret string
		return ret
	}
	return *o.TxId
}

// GetTxIdOk returns a tuple with the TxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunFaucetResponse) GetTxIdOk() (*string, bool) {
	if o == nil || o.TxId == nil {
		return nil, false
	}
	return o.TxId, true
}

// HasTxId returns a boolean if a field has been set.
func (o *RunFaucetResponse) HasTxId() bool {
	if o != nil && o.TxId != nil {
		return true
	}

	return false
}

// SetTxId gets a reference to the given string and assigns it to the TxId field.
func (o *RunFaucetResponse) SetTxId(v string) {
	o.TxId = &v
}

// GetTxRaw returns the TxRaw field value if set, zero value otherwise.
func (o *RunFaucetResponse) GetTxRaw() string {
	if o == nil || o.TxRaw == nil {
		var ret string
		return ret
	}
	return *o.TxRaw
}

// GetTxRawOk returns a tuple with the TxRaw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunFaucetResponse) GetTxRawOk() (*string, bool) {
	if o == nil || o.TxRaw == nil {
		return nil, false
	}
	return o.TxRaw, true
}

// HasTxRaw returns a boolean if a field has been set.
func (o *RunFaucetResponse) HasTxRaw() bool {
	if o != nil && o.TxRaw != nil {
		return true
	}

	return false
}

// SetTxRaw gets a reference to the given string and assigns it to the TxRaw field.
func (o *RunFaucetResponse) SetTxRaw(v string) {
	o.TxRaw = &v
}

func (o RunFaucetResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["success"] = o.Success
	}
	if o.TxId != nil {
		toSerialize["txId"] = o.TxId
	}
	if o.TxRaw != nil {
		toSerialize["txRaw"] = o.TxRaw
	}
	return json.Marshal(toSerialize)
}

type NullableRunFaucetResponse struct {
	value *RunFaucetResponse
	isSet bool
}

func (v NullableRunFaucetResponse) Get() *RunFaucetResponse {
	return v.value
}

func (v *NullableRunFaucetResponse) Set(val *RunFaucetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRunFaucetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRunFaucetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunFaucetResponse(val *RunFaucetResponse) *NullableRunFaucetResponse {
	return &NullableRunFaucetResponse{value: val, isSet: true}
}

func (v NullableRunFaucetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunFaucetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


