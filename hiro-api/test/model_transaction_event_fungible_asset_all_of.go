/*
Stacks Blockchain API

Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

API version: STACKS_API_VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransactionEventFungibleAssetAllOf struct for TransactionEventFungibleAssetAllOf
type TransactionEventFungibleAssetAllOf struct {
	EventType string `json:"event_type"`
	TxId string `json:"tx_id"`
	Asset TransactionEventFungibleAssetAllOfAsset `json:"asset"`
}

// NewTransactionEventFungibleAssetAllOf instantiates a new TransactionEventFungibleAssetAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionEventFungibleAssetAllOf(eventType string, txId string, asset TransactionEventFungibleAssetAllOfAsset) *TransactionEventFungibleAssetAllOf {
	this := TransactionEventFungibleAssetAllOf{}
	this.EventType = eventType
	this.TxId = txId
	this.Asset = asset
	return &this
}

// NewTransactionEventFungibleAssetAllOfWithDefaults instantiates a new TransactionEventFungibleAssetAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionEventFungibleAssetAllOfWithDefaults() *TransactionEventFungibleAssetAllOf {
	this := TransactionEventFungibleAssetAllOf{}
	return &this
}

// GetEventType returns the EventType field value
func (o *TransactionEventFungibleAssetAllOf) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *TransactionEventFungibleAssetAllOf) GetEventTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *TransactionEventFungibleAssetAllOf) SetEventType(v string) {
	o.EventType = v
}

// GetTxId returns the TxId field value
func (o *TransactionEventFungibleAssetAllOf) GetTxId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TxId
}

// GetTxIdOk returns a tuple with the TxId field value
// and a boolean to check if the value has been set.
func (o *TransactionEventFungibleAssetAllOf) GetTxIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxId, true
}

// SetTxId sets field value
func (o *TransactionEventFungibleAssetAllOf) SetTxId(v string) {
	o.TxId = v
}

// GetAsset returns the Asset field value
func (o *TransactionEventFungibleAssetAllOf) GetAsset() TransactionEventFungibleAssetAllOfAsset {
	if o == nil {
		var ret TransactionEventFungibleAssetAllOfAsset
		return ret
	}

	return o.Asset
}

// GetAssetOk returns a tuple with the Asset field value
// and a boolean to check if the value has been set.
func (o *TransactionEventFungibleAssetAllOf) GetAssetOk() (*TransactionEventFungibleAssetAllOfAsset, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Asset, true
}

// SetAsset sets field value
func (o *TransactionEventFungibleAssetAllOf) SetAsset(v TransactionEventFungibleAssetAllOfAsset) {
	o.Asset = v
}

func (o TransactionEventFungibleAssetAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["event_type"] = o.EventType
	}
	if true {
		toSerialize["tx_id"] = o.TxId
	}
	if true {
		toSerialize["asset"] = o.Asset
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionEventFungibleAssetAllOf struct {
	value *TransactionEventFungibleAssetAllOf
	isSet bool
}

func (v NullableTransactionEventFungibleAssetAllOf) Get() *TransactionEventFungibleAssetAllOf {
	return v.value
}

func (v *NullableTransactionEventFungibleAssetAllOf) Set(val *TransactionEventFungibleAssetAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionEventFungibleAssetAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionEventFungibleAssetAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionEventFungibleAssetAllOf(val *TransactionEventFungibleAssetAllOf) *NullableTransactionEventFungibleAssetAllOf {
	return &NullableTransactionEventFungibleAssetAllOf{value: val, isSet: true}
}

func (v NullableTransactionEventFungibleAssetAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionEventFungibleAssetAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


