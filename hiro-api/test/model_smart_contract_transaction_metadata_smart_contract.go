/*
Stacks Blockchain API

Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

API version: STACKS_API_VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SmartContractTransactionMetadataSmartContract struct for SmartContractTransactionMetadataSmartContract
type SmartContractTransactionMetadataSmartContract struct {
	// Contract identifier formatted as `<principaladdress>.<contract_name>`
	ContractId string `json:"contract_id"`
	// Clarity code of the smart contract being deployed
	SourceCode string `json:"source_code"`
}

// NewSmartContractTransactionMetadataSmartContract instantiates a new SmartContractTransactionMetadataSmartContract object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmartContractTransactionMetadataSmartContract(contractId string, sourceCode string) *SmartContractTransactionMetadataSmartContract {
	this := SmartContractTransactionMetadataSmartContract{}
	this.ContractId = contractId
	this.SourceCode = sourceCode
	return &this
}

// NewSmartContractTransactionMetadataSmartContractWithDefaults instantiates a new SmartContractTransactionMetadataSmartContract object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmartContractTransactionMetadataSmartContractWithDefaults() *SmartContractTransactionMetadataSmartContract {
	this := SmartContractTransactionMetadataSmartContract{}
	return &this
}

// GetContractId returns the ContractId field value
func (o *SmartContractTransactionMetadataSmartContract) GetContractId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContractId
}

// GetContractIdOk returns a tuple with the ContractId field value
// and a boolean to check if the value has been set.
func (o *SmartContractTransactionMetadataSmartContract) GetContractIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractId, true
}

// SetContractId sets field value
func (o *SmartContractTransactionMetadataSmartContract) SetContractId(v string) {
	o.ContractId = v
}

// GetSourceCode returns the SourceCode field value
func (o *SmartContractTransactionMetadataSmartContract) GetSourceCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceCode
}

// GetSourceCodeOk returns a tuple with the SourceCode field value
// and a boolean to check if the value has been set.
func (o *SmartContractTransactionMetadataSmartContract) GetSourceCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceCode, true
}

// SetSourceCode sets field value
func (o *SmartContractTransactionMetadataSmartContract) SetSourceCode(v string) {
	o.SourceCode = v
}

func (o SmartContractTransactionMetadataSmartContract) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["contract_id"] = o.ContractId
	}
	if true {
		toSerialize["source_code"] = o.SourceCode
	}
	return json.Marshal(toSerialize)
}

type NullableSmartContractTransactionMetadataSmartContract struct {
	value *SmartContractTransactionMetadataSmartContract
	isSet bool
}

func (v NullableSmartContractTransactionMetadataSmartContract) Get() *SmartContractTransactionMetadataSmartContract {
	return v.value
}

func (v *NullableSmartContractTransactionMetadataSmartContract) Set(val *SmartContractTransactionMetadataSmartContract) {
	v.value = val
	v.isSet = true
}

func (v NullableSmartContractTransactionMetadataSmartContract) IsSet() bool {
	return v.isSet
}

func (v *NullableSmartContractTransactionMetadataSmartContract) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmartContractTransactionMetadataSmartContract(val *SmartContractTransactionMetadataSmartContract) *NullableSmartContractTransactionMetadataSmartContract {
	return &NullableSmartContractTransactionMetadataSmartContract{value: val, isSet: true}
}

func (v NullableSmartContractTransactionMetadataSmartContract) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmartContractTransactionMetadataSmartContract) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


