/*
Stacks Blockchain API

Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

API version: STACKS_API_VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BnsGetAllNamespacesResponse Fetch a list of all namespaces known to the node.
type BnsGetAllNamespacesResponse struct {
	Namespaces []string `json:"namespaces"`
}

// NewBnsGetAllNamespacesResponse instantiates a new BnsGetAllNamespacesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBnsGetAllNamespacesResponse(namespaces []string) *BnsGetAllNamespacesResponse {
	this := BnsGetAllNamespacesResponse{}
	this.Namespaces = namespaces
	return &this
}

// NewBnsGetAllNamespacesResponseWithDefaults instantiates a new BnsGetAllNamespacesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBnsGetAllNamespacesResponseWithDefaults() *BnsGetAllNamespacesResponse {
	this := BnsGetAllNamespacesResponse{}
	return &this
}

// GetNamespaces returns the Namespaces field value
func (o *BnsGetAllNamespacesResponse) GetNamespaces() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Namespaces
}

// GetNamespacesOk returns a tuple with the Namespaces field value
// and a boolean to check if the value has been set.
func (o *BnsGetAllNamespacesResponse) GetNamespacesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Namespaces, true
}

// SetNamespaces sets field value
func (o *BnsGetAllNamespacesResponse) SetNamespaces(v []string) {
	o.Namespaces = v
}

func (o BnsGetAllNamespacesResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["namespaces"] = o.Namespaces
	}
	return json.Marshal(toSerialize)
}

type NullableBnsGetAllNamespacesResponse struct {
	value *BnsGetAllNamespacesResponse
	isSet bool
}

func (v NullableBnsGetAllNamespacesResponse) Get() *BnsGetAllNamespacesResponse {
	return v.value
}

func (v *NullableBnsGetAllNamespacesResponse) Set(val *BnsGetAllNamespacesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBnsGetAllNamespacesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBnsGetAllNamespacesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBnsGetAllNamespacesResponse(val *BnsGetAllNamespacesResponse) *NullableBnsGetAllNamespacesResponse {
	return &NullableBnsGetAllNamespacesResponse{value: val, isSet: true}
}

func (v NullableBnsGetAllNamespacesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBnsGetAllNamespacesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


