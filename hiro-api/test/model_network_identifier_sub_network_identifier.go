/*
Stacks Blockchain API

Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

API version: STACKS_API_VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NetworkIdentifierSubNetworkIdentifier In blockchains with sharded state, the SubNetworkIdentifier is required to query some object on a specific shard. This identifier is optional for all non-sharded blockchains.
type NetworkIdentifierSubNetworkIdentifier struct {
	// Network name
	Network string `json:"network"`
	Metadata *NetworkIdentifierSubNetworkIdentifierMetadata `json:"metadata,omitempty"`
}

// NewNetworkIdentifierSubNetworkIdentifier instantiates a new NetworkIdentifierSubNetworkIdentifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkIdentifierSubNetworkIdentifier(network string) *NetworkIdentifierSubNetworkIdentifier {
	this := NetworkIdentifierSubNetworkIdentifier{}
	this.Network = network
	return &this
}

// NewNetworkIdentifierSubNetworkIdentifierWithDefaults instantiates a new NetworkIdentifierSubNetworkIdentifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkIdentifierSubNetworkIdentifierWithDefaults() *NetworkIdentifierSubNetworkIdentifier {
	this := NetworkIdentifierSubNetworkIdentifier{}
	return &this
}

// GetNetwork returns the Network field value
func (o *NetworkIdentifierSubNetworkIdentifier) GetNetwork() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value
// and a boolean to check if the value has been set.
func (o *NetworkIdentifierSubNetworkIdentifier) GetNetworkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Network, true
}

// SetNetwork sets field value
func (o *NetworkIdentifierSubNetworkIdentifier) SetNetwork(v string) {
	o.Network = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *NetworkIdentifierSubNetworkIdentifier) GetMetadata() NetworkIdentifierSubNetworkIdentifierMetadata {
	if o == nil || o.Metadata == nil {
		var ret NetworkIdentifierSubNetworkIdentifierMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkIdentifierSubNetworkIdentifier) GetMetadataOk() (*NetworkIdentifierSubNetworkIdentifierMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *NetworkIdentifierSubNetworkIdentifier) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given NetworkIdentifierSubNetworkIdentifierMetadata and assigns it to the Metadata field.
func (o *NetworkIdentifierSubNetworkIdentifier) SetMetadata(v NetworkIdentifierSubNetworkIdentifierMetadata) {
	o.Metadata = &v
}

func (o NetworkIdentifierSubNetworkIdentifier) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["network"] = o.Network
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkIdentifierSubNetworkIdentifier struct {
	value *NetworkIdentifierSubNetworkIdentifier
	isSet bool
}

func (v NullableNetworkIdentifierSubNetworkIdentifier) Get() *NetworkIdentifierSubNetworkIdentifier {
	return v.value
}

func (v *NullableNetworkIdentifierSubNetworkIdentifier) Set(val *NetworkIdentifierSubNetworkIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkIdentifierSubNetworkIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkIdentifierSubNetworkIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkIdentifierSubNetworkIdentifier(val *NetworkIdentifierSubNetworkIdentifier) *NullableNetworkIdentifierSubNetworkIdentifier {
	return &NullableNetworkIdentifierSubNetworkIdentifier{value: val, isSet: true}
}

func (v NullableNetworkIdentifierSubNetworkIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkIdentifierSubNetworkIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


