/*
Stacks Blockchain API

Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a> 

API version: STACKS_API_VERSION
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FeeRateRequest Request to fetch fee for a transaction
type FeeRateRequest struct {
	// A serialized transaction
	Transaction string `json:"transaction"`
}

// NewFeeRateRequest instantiates a new FeeRateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeeRateRequest(transaction string) *FeeRateRequest {
	this := FeeRateRequest{}
	this.Transaction = transaction
	return &this
}

// NewFeeRateRequestWithDefaults instantiates a new FeeRateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeeRateRequestWithDefaults() *FeeRateRequest {
	this := FeeRateRequest{}
	return &this
}

// GetTransaction returns the Transaction field value
func (o *FeeRateRequest) GetTransaction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Transaction
}

// GetTransactionOk returns a tuple with the Transaction field value
// and a boolean to check if the value has been set.
func (o *FeeRateRequest) GetTransactionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Transaction, true
}

// SetTransaction sets field value
func (o *FeeRateRequest) SetTransaction(v string) {
	o.Transaction = v
}

func (o FeeRateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["transaction"] = o.Transaction
	}
	return json.Marshal(toSerialize)
}

type NullableFeeRateRequest struct {
	value *FeeRateRequest
	isSet bool
}

func (v NullableFeeRateRequest) Get() *FeeRateRequest {
	return v.value
}

func (v *NullableFeeRateRequest) Set(val *FeeRateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFeeRateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFeeRateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeeRateRequest(val *FeeRateRequest) *NullableFeeRateRequest {
	return &NullableFeeRateRequest{value: val, isSet: true}
}

func (v NullableFeeRateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeeRateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


